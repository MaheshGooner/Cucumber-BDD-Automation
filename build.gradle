import groovy.io.FileType
import net.masterthought.cucumber.Configuration
import net.masterthought.cucumber.ReportBuilder

import java.nio.charset.Charset


apply plugin: 'java'

buildscript {
    ext {
        cucumberReportVersion = '3.12.0'
        cukesVersion = '1.2.5'
    }

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "net.masterthought:cucumber-reporting:$cucumberReportVersion"
    }
}

// in this section declare where to find the dependencies of your project
repositories {
    jcenter()
}

// in this section declare the dependencies for your production and test code
dependencies {
    compile "org.seleniumhq.selenium:selenium-support:2.53.1"
    compile "org.seleniumhq.selenium:selenium-firefox-driver:2.53.1"
    compile "org.seleniumhq.selenium:selenium-chrome-driver:2.53.1"
    compile "org.seleniumhq.selenium:selenium-remote-driver:2.53.1"
    compile "org.seleniumhq.selenium:selenium-server:2.53.1"
    compile "info.cukes:cucumber-java:$cukesVersion"
    compile "info.cukes:cucumber-core:$cukesVersion"
    compile "info.cukes:cucumber-junit:$cukesVersion"
    compile 'info.cukes:gherkin:2.12.2'
    testCompile 'junit:junit:4.12'
}

task mergeFunctionalTests() {
    doLast {

        File reportOutputDirectory = new File("$projectDir/test-results/merged-cucumbers")
        List<String> jsonFiles = new ArrayList<>()

        def dir = new File("$projectDir/test-results/cucumber-reports")
        dir.eachFileRecurse(FileType.FILES) { file ->
            if (file.getPath().endsWith(".json")) {
                jsonFiles << file.getPath()
            }
        }


        String projectName = "cucumber-jvm"
        Configuration configuration = new Configuration(reportOutputDirectory, projectName)
        ReportBuilder reportBuilder = new ReportBuilder(jsonFiles, configuration)
        reportBuilder.generateReports()
    }
}

task runFunctionalTests(type: Test) {

    dependsOn 'cleanTest'

    doFirst {
        new File("$projectDir/test-results/cucumber-reports").mkdirs()
    }
    finalizedBy mergeFunctionalTests

    description = "Run Functional Tests"
    reports.html.enabled = false
    afterTest { descriptor, result ->
        result = result as TestResult
        if (result.resultType == TestResult.ResultType.FAILURE) {
            logger.lifecycle(" Exceptions in ${descriptor.getName()} [${result.resultType.name()}]:")
            result.exceptions.forEach({ exception ->
                exception = exception as Throwable
                ByteArrayOutputStream baos = new ByteArrayOutputStream()
                exception.printStackTrace(new PrintStream(baos))
                logger.lifecycle(baos.toString(Charset.defaultCharset().toString()))
            })
        }
    }
    afterSuite { descriptor, result ->
        result = result as TestResult
        logger.lifecycle("Test ${descriptor.getName()}: [${result.resultType.name()}] in ${result.endTime - result.startTime}")
        logger.lifecycle("  ${result.getSuccessfulTestCount()} passed")
        logger.lifecycle("  ${result.getFailedTestCount()} failed")
        logger.lifecycle("  ${result.getSkippedTestCount()} skipped")

    }
}